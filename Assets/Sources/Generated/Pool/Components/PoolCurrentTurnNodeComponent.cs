//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class PoolContext {

    public PoolEntity currentTurnNodeEntity { get { return GetGroup(PoolMatcher.CurrentTurnNode).GetSingleEntity(); } }
    public CurrentTurnNodeComponent currentTurnNode { get { return currentTurnNodeEntity.currentTurnNode; } }
    public bool hasCurrentTurnNode { get { return currentTurnNodeEntity != null; } }

    public PoolEntity SetCurrentTurnNode(System.Collections.Generic.LinkedListNode<PoolEntity> newValue) {
        if (hasCurrentTurnNode) {
            throw new Entitas.EntitasException("Could not set CurrentTurnNode!\n" + this + " already has an entity with CurrentTurnNodeComponent!",
                "You should check if the context already has a currentTurnNodeEntity before setting it or use context.ReplaceCurrentTurnNode().");
        }
        var entity = CreateEntity();
        entity.AddCurrentTurnNode(newValue);
        return entity;
    }

    public void ReplaceCurrentTurnNode(System.Collections.Generic.LinkedListNode<PoolEntity> newValue) {
        var entity = currentTurnNodeEntity;
        if (entity == null) {
            entity = SetCurrentTurnNode(newValue);
        } else {
            entity.ReplaceCurrentTurnNode(newValue);
        }
    }

    public void RemoveCurrentTurnNode() {
        currentTurnNodeEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class PoolEntity {

    public CurrentTurnNodeComponent currentTurnNode { get { return (CurrentTurnNodeComponent)GetComponent(PoolComponentsLookup.CurrentTurnNode); } }
    public bool hasCurrentTurnNode { get { return HasComponent(PoolComponentsLookup.CurrentTurnNode); } }

    public void AddCurrentTurnNode(System.Collections.Generic.LinkedListNode<PoolEntity> newValue) {
        var index = PoolComponentsLookup.CurrentTurnNode;
        var component = CreateComponent<CurrentTurnNodeComponent>(index);
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceCurrentTurnNode(System.Collections.Generic.LinkedListNode<PoolEntity> newValue) {
        var index = PoolComponentsLookup.CurrentTurnNode;
        var component = CreateComponent<CurrentTurnNodeComponent>(index);
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveCurrentTurnNode() {
        RemoveComponent(PoolComponentsLookup.CurrentTurnNode);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class PoolMatcher {

    static Entitas.IMatcher<PoolEntity> _matcherCurrentTurnNode;

    public static Entitas.IMatcher<PoolEntity> CurrentTurnNode {
        get {
            if (_matcherCurrentTurnNode == null) {
                var matcher = (Entitas.Matcher<PoolEntity>)Entitas.Matcher<PoolEntity>.AllOf(PoolComponentsLookup.CurrentTurnNode);
                matcher.componentNames = PoolComponentsLookup.componentNames;
                _matcherCurrentTurnNode = matcher;
            }

            return _matcherCurrentTurnNode;
        }
    }
}
