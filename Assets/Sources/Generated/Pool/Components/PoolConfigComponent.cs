//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class PoolContext {

    public PoolEntity configEntity { get { return GetGroup(PoolMatcher.Config).GetSingleEntity(); } }
    public ConfigComponent config { get { return configEntity.config; } }
    public bool hasConfig { get { return configEntity != null; } }

    public PoolEntity SetConfig(int newColumns, int newRows, int newFoodCountMin, int newFoodCountMax, int newWallCountMin, int newWallCountMax, int newEnemyCountMultiplier, int newFoodPoints, int newSodaPoints, int newEnemy1Dmg, int newEnemy2Dmg, float newTurnDelay) {
        if (hasConfig) {
            throw new Entitas.EntitasException("Could not set Config!\n" + this + " already has an entity with ConfigComponent!",
                "You should check if the context already has a configEntity before setting it or use context.ReplaceConfig().");
        }
        var entity = CreateEntity();
        entity.AddConfig(newColumns, newRows, newFoodCountMin, newFoodCountMax, newWallCountMin, newWallCountMax, newEnemyCountMultiplier, newFoodPoints, newSodaPoints, newEnemy1Dmg, newEnemy2Dmg, newTurnDelay);
        return entity;
    }

    public void ReplaceConfig(int newColumns, int newRows, int newFoodCountMin, int newFoodCountMax, int newWallCountMin, int newWallCountMax, int newEnemyCountMultiplier, int newFoodPoints, int newSodaPoints, int newEnemy1Dmg, int newEnemy2Dmg, float newTurnDelay) {
        var entity = configEntity;
        if (entity == null) {
            entity = SetConfig(newColumns, newRows, newFoodCountMin, newFoodCountMax, newWallCountMin, newWallCountMax, newEnemyCountMultiplier, newFoodPoints, newSodaPoints, newEnemy1Dmg, newEnemy2Dmg, newTurnDelay);
        } else {
            entity.ReplaceConfig(newColumns, newRows, newFoodCountMin, newFoodCountMax, newWallCountMin, newWallCountMax, newEnemyCountMultiplier, newFoodPoints, newSodaPoints, newEnemy1Dmg, newEnemy2Dmg, newTurnDelay);
        }
    }

    public void RemoveConfig() {
        configEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class PoolEntity {

    public ConfigComponent config { get { return (ConfigComponent)GetComponent(PoolComponentsLookup.Config); } }
    public bool hasConfig { get { return HasComponent(PoolComponentsLookup.Config); } }

    public void AddConfig(int newColumns, int newRows, int newFoodCountMin, int newFoodCountMax, int newWallCountMin, int newWallCountMax, int newEnemyCountMultiplier, int newFoodPoints, int newSodaPoints, int newEnemy1Dmg, int newEnemy2Dmg, float newTurnDelay) {
        var index = PoolComponentsLookup.Config;
        var component = CreateComponent<ConfigComponent>(index);
        component.columns = newColumns;
        component.rows = newRows;
        component.foodCountMin = newFoodCountMin;
        component.foodCountMax = newFoodCountMax;
        component.wallCountMin = newWallCountMin;
        component.wallCountMax = newWallCountMax;
        component.enemyCountMultiplier = newEnemyCountMultiplier;
        component.foodPoints = newFoodPoints;
        component.sodaPoints = newSodaPoints;
        component.enemy1Dmg = newEnemy1Dmg;
        component.enemy2Dmg = newEnemy2Dmg;
        component.turnDelay = newTurnDelay;
        AddComponent(index, component);
    }

    public void ReplaceConfig(int newColumns, int newRows, int newFoodCountMin, int newFoodCountMax, int newWallCountMin, int newWallCountMax, int newEnemyCountMultiplier, int newFoodPoints, int newSodaPoints, int newEnemy1Dmg, int newEnemy2Dmg, float newTurnDelay) {
        var index = PoolComponentsLookup.Config;
        var component = CreateComponent<ConfigComponent>(index);
        component.columns = newColumns;
        component.rows = newRows;
        component.foodCountMin = newFoodCountMin;
        component.foodCountMax = newFoodCountMax;
        component.wallCountMin = newWallCountMin;
        component.wallCountMax = newWallCountMax;
        component.enemyCountMultiplier = newEnemyCountMultiplier;
        component.foodPoints = newFoodPoints;
        component.sodaPoints = newSodaPoints;
        component.enemy1Dmg = newEnemy1Dmg;
        component.enemy2Dmg = newEnemy2Dmg;
        component.turnDelay = newTurnDelay;
        ReplaceComponent(index, component);
    }

    public void RemoveConfig() {
        RemoveComponent(PoolComponentsLookup.Config);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class PoolMatcher {

    static Entitas.IMatcher<PoolEntity> _matcherConfig;

    public static Entitas.IMatcher<PoolEntity> Config {
        get {
            if (_matcherConfig == null) {
                var matcher = (Entitas.Matcher<PoolEntity>)Entitas.Matcher<PoolEntity>.AllOf(PoolComponentsLookup.Config);
                matcher.componentNames = PoolComponentsLookup.componentNames;
                _matcherConfig = matcher;
            }

            return _matcherConfig;
        }
    }
}
