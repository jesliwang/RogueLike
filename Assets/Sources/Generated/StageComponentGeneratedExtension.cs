//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public StageComponent stage { get { return (StageComponent)GetComponent(CoreComponentIds.Stage); } }
        public bool hasStage { get { return HasComponent(CoreComponentIds.Stage); } }

        public Entity AddStage(int newStageId) {
            var component = CreateComponent<StageComponent>(CoreComponentIds.Stage);
            component.StageId = newStageId;
            return AddComponent(CoreComponentIds.Stage, component);
        }

        public Entity ReplaceStage(int newStageId) {
            var component = CreateComponent<StageComponent>(CoreComponentIds.Stage);
            component.StageId = newStageId;
            ReplaceComponent(CoreComponentIds.Stage, component);
            return this;
        }

        public Entity RemoveStage() {
            return RemoveComponent(CoreComponentIds.Stage);
        }
    }

    public partial class Pool {

        public Entity stageEntity { get { return GetGroup(CoreMatcher.Stage).GetSingleEntity(); } }
        public StageComponent stage { get { return stageEntity.stage; } }
        public bool hasStage { get { return stageEntity != null; } }

        public Entity SetStage(int newStageId) {
            if(hasStage) {
                throw new EntitasException("Could not set stage!\n" + this + " already has an entity with StageComponent!",
                    "You should check if the pool already has a stageEntity before setting it or use pool.ReplaceStage().");
            }
            var entity = CreateEntity();
            entity.AddStage(newStageId);
            return entity;
        }

        public Entity ReplaceStage(int newStageId) {
            var entity = stageEntity;
            if(entity == null) {
                entity = SetStage(newStageId);
            } else {
                entity.ReplaceStage(newStageId);
            }

            return entity;
        }

        public void RemoveStage() {
            DestroyEntity(stageEntity);
        }
    }
}

    public partial class CoreMatcher {

        static IMatcher _matcherStage;

        public static IMatcher Stage {
            get {
                if(_matcherStage == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.Stage);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherStage = matcher;
                }

                return _matcherStage;
            }
        }
    }
